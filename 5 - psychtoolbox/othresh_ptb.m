function othresh_ptb( subject )% OTHRESH_PTB  Measure an orientation discrimination contrast threshold%              using the Psychophysics Toolbox%% othresh_ptb( subject )% set default subject codeif nargin<1    subject='jfk';end% stimulus characteristicsbggrey = 128;             % background rgb valuelambdaP = 8;              % grating wavelength (in pixels)thetaR = pi/32;           % grating orientation from verticalsigmaP = 7;               % gabor space constant (in pixels)framesizeP = 10*lambdaP;  % stimulus size (in pixels)stimdurS = 0.250;         % stimulus durations (in seconds)cstlist = [ 0.01 0.02 0.03 0.05 0.10 0.15 ];  % stimulus contrasts% make unit-contrast gratingsleftgabor =  gabor2d(lambdaP, thetaR,0,sigmaP,framesizeP);rightgabor = gabor2d(lambdaP,-thetaR,0,sigmaP,framesizeP);% make auditory feedback signalshighbeep=sin(2*pi*((0:512)/8192)*880);lowbeep=sin(2*pi*((0:512)/8192)*440);% set preferencesScreen('Preference', 'SkipSyncTests', 2 );Screen('Preference', 'SuppressAllWarnings', 1 );% open onscreen window[winID,winRect] = Screen(0,'OpenWindow',bggrey);HideCursor;     % hide mouse cursorListenChar(2);  % turn off keyboard echoing% calculate stimulus positionstimRect = CenterRect( [ 0 0 framesizeP framesizeP ], winRect );% open data file and write headerfname=[ 'ot_' subject '.txt' ];fid=fopen(fname,'a');if fid==-1    error('Unable to open data file.');endfprintf(fid,'%% Orientation discrimination threshold experiment\n');fprintf(fid,'%% subject = %s\n',subject);fprintf(fid,'%% time = %s\n',datestr(now));fprintf(fid,'%% lambda = %.2f, theta = %.2f, framesize = %.2f, stimdur = %.2f\n',lambdaP,thetaR,framesizeP,stimdurS);fprintf(fid,'%% columns:  trial_number, stimulus_right, stimulus_contrast, stimulus_time, response_right, correct, reaction_time\n');% trialsfor t=1:100        % pause before each trial    pause(1);        % pick a contrast level    cst = cstlist( ceil(rand*numel(cstlist)) );        % choose orientation    right=(rand<0.5);    if right==1        stim = cst*rightgabor;    else        stim = cst*leftgabor;    end        % convert contrast to rgb values (0-255)    % (in a real experiment we would use a calibration routine here;    %  see later lectures for details)    stim = bggrey*( 1 + stim );        % show stimulus and record the time when it appears.  sometimes the    % stimulus is very faint, so we'll also draw a thin rectangle around    % it, so that the subject at least knows when it appears.    Screen('PutImage',winID,stim,stimRect);    Screen('FrameRect',winID,round(1.1*bggrey),stimRect);    timeon = Screen('Flip',winID);        % draw a blank screen and show it stimdurS seconds later    Screen('FillRect',winID,bggrey);    timeoff = Screen('Flip',winID,timeon+stimdurS);        % to be safe, check how long the stimulus was actually shown    actualdurS = timeoff-timeon;        % get subject's response    while 1        [down,timedown,code] = KbCheck;        if down            rt = timedown-timeoff;            switch KbName(code)                case { '1', '1!' }, respright = 0;   break;                case { '2', '2@' }, respright = 1;   break;                case { 'q', 'Q'  }, respright = NaN; break;            end        end    end        % if the subject pressed the quit key, exit the main loop    if isnan(respright)        break    end        % see whether subject gave the correct response    correct = (right==respright);        % give auditory feedback    if correct        sound(highbeep);    else        sound(lowbeep);    end        % save trial data    fprintf(fid,'%.0f\t%.0f\t%.3f\t%.3f\t%.0f\t%.0f\t%.3f\n',t,right,cst,actualdurS,respright,correct,rt);end% close data filefprintf(fid,'%% end of session\n\n');fclose(fid);% close windowScreen('Close',winID);ShowCursor;     % restore mouse cursorListenChar(0);  % restore keyboard echoingend